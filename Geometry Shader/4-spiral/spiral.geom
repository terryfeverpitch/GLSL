#version 120 
#extension GL_EXT_geometry_shader4 : enable

//CIRL GPU Geometry Program: Derek Anderson and Robert Luke
// very simple geometry shader
// INPUT: LINES
// OUTPUT: LINESTRIP

uniform float pitch;

vec3 rodriguesRot (vec3 v, vec3 axis, float rad)
{
	return v*cos(rad) + cross(axis,v)*sin(rad) + axis*dot(axis,v)*(1.0-cos(rad));
}

void main(void)               
{
	//Pass-thru!
	for(int i=0; i< gl_VerticesIn; i++){
		gl_Position = gl_ModelViewProjectionMatrix * gl_PositionIn[i];
		EmitVertex();
	}
	EndPrimitive();

	vec3 axis = normalize (gl_PositionIn[1].xyz - gl_PositionIn[0].xyz);
	float length = distance (gl_PositionIn[0].xyz, gl_PositionIn[1].xyz);
	int turns = int(floor(length/pitch));
	
	vec3 rotAxis = normalize(cross (vec3(0.,1.,0.), axis));
	float rotAngle = acos (dot(vec3(0.,1.,0.), axis));
	
	// generate spirals
	for(int i=0; i<= 36*turns; i++){ // 10 degrees per point (36 points per turn)
		float rad = radians(float(i)*10.0);
		vec3 pos = vec3 (cos(rad), float(i)*pitch/36., -sin(rad));
		pos = gl_PositionIn[0].xyz + rodriguesRot (pos, rotAxis, rotAngle); 
	
		gl_Position = gl_ModelViewProjectionMatrix * vec4(pos,1.0);

		EmitVertex();
	}
	EndPrimitive();	
}
//////////////////////////////////////////////////////////////////////////////////////////////////
//// note that the number of vertices generated by geometry shader is limited!! 
////////////////////////////////////////////////////////////////////////////////////////////////
